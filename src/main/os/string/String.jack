// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array arr;

    field int length;

    field int currentLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength = 0){
            let maxLength = 1;
        }
        let arr = Memory.alloc(maxLength);
        let currentLength = 0;
        let length = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(arr);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return currentLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return arr[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let arr[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(currentLength < length){
            let arr[currentLength] = c;
            let currentLength = currentLength + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(currentLength > 0){
            let currentLength = currentLength - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, d, v;
        let i = 0;
        let v = 0;
        let d = 0;
        while((i < currentLength)){
            if((arr[i] < 47) & (arr[i] > 58)){
               return v;
            }
            let d = arr[i] - 48;
            let v = v * 10 + d;
            let i = i + 1;
        }
        if(arr[0] = '-'){
            return -v;
        }
        return v;
    }

    function char digitChar(int val){
        return val + 48;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int lastDigit, q;
        var char c;

        let q = val / 10;
        let lastDigit = val - (10 * q);
        let c = String.digitChar(lastDigit);

        if(val < 10){
            let arr[currentLength] = c;
            let currentLength = currentLength + 1;
            return;
        }

        do setInt(val/10);
        let arr[currentLength] = c;
        let currentLength = currentLength + 1;
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
