// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array freeList;
    static int length, next;

    /** Initializes the class. */
    function void init() {
        let freeList = 2048; // heap base
        let length = 0;
        let next = 1;
        let freeList[next] = null;
        let freeList[length] = 16384-2048;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        var Array arr;
        let arr = 0;
        return arr[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        var Array arr;
        let arr = 0;
        let arr[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array block, prevBlock, nextBlock;
        let block = freeList;
        let prevBlock = 0;
        while(block[length] < size){
            let prevBlock = block;
            let block = block[next];
            if(block = null){
                return -1;
            }
        }

        let nextBlock = block + size + 1;
        let nextBlock[length] = block[length] - size - 1;
        let nextBlock[next] = block[next];
        let block[length] = size + 1;
        let block[next] = null;

        if(prevBlock = 0){
            let freeList = nextBlock;
        }else{
            let prevBlock[next] = nextBlock;
        }

        return block + 1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array block;
        let block = o - 1;
        let block[next] = freeList;
        let freeList = block;
        return;
    }
}
