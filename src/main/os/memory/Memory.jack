class Memory {
    static Array ram;
    static Array heap;
    static int freelist;

    /** Initializes the class. */
    function void init() {
      let ram = 0;
      let heap = 2048;
      let freelist = 0;
      let heap[0] = 0;        // next
      let heap[1] = 14335;    // length
      return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
      return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
      let ram[address] = value;
      return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
      var int next;
      let next = heap[freelist];    // next points to next freelist, next+1->length
      while(heap[next+1] < (size + 2)) {
        let next = heap[next];
      }
      // update the length of the freelist we used for this alloc
      let heap[next+1] = heap[next+1] - (size+1);

      // the location we allocate
      let heap[heap[next+1] + 1] = size + 1;
      /*
      do Output.printInt(heap[next+1] + 1);
      do Output.println();
      do Output.printInt(heap[heap[next+1] + 1]);
      */

      return heap[next+1] + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
      var int next;
      var int ptr;
      let next = 0;
      while(~(heap[next] = 0)) {
      /*
        do Output.printString("next: ");
        do Output.printInt(next);
        do Output.println();
        */
        let next = heap[next];
      }
      let ptr = o-1;
      let heap[ptr] = 0;
      let heap[next] = ptr;

      return;
    }
}
