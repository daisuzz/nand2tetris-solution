<class>
<keyword>class</keyword>
<identifier>Main, class</identifier>
<symbol>{</symbol>
<keyword>void</keyword>
<symbol>(</symbol>
<parameterList>
</parameterList>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>int</keyword>
<identifier>value, var, defined, var, 0</identifier>
<symbol>;</symbol>
</varDec>
<statements>
<identifier>Main, class</identifier>
<expressionList>
<term>
<integerConstant>8001</integerConstant>
</term>
</expression>
<symbol>,</symbol>
<term>
<integerConstant>16</integerConstant>
</term>
</expression>
<symbol>,</symbol>
<term>
<symbol>-</symbol>
<term>
<integerConstant>1</integerConstant>
</term>
</term>
</expression>
</expressionList>
<term>
<identifier>Memory, class</identifier>
<expressionList>
<term>
<integerConstant>8000</integerConstant>
</term>
</expression>
</expressionList>
</term>
</expression>
</letStatement>
<identifier>Main, class</identifier>
<expressionList>
<term>
</term>
</expression>
</expressionList>
<returnStatement>
<keyword>return</keyword>
<symbol>;</symbol>
</returnStatement>
</statements>
</subroutineBody>
</subroutineDec>
<keyword>void</keyword>
<symbol>(</symbol>
<parameterList>
<keyword>int</keyword>
<identifier>value, argument, used, ARG, 0</identifier>
</parameterList>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>int</keyword>
<identifier>mask, var, defined, var, 0</identifier>
<symbol>,</symbol>
<identifier>position, var, defined, var, 1</identifier>
<symbol>;</symbol>
</varDec>
<keyword>boolean</keyword>
<identifier>loop, var, defined, var, 2</identifier>
<symbol>;</symbol>
</varDec>
<statements>
<term>
</term>
</expression>
</letStatement>
<whileStatement>
<keyword>while</keyword>
<symbol>(</symbol>
<term>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<term>
</term>
<term>
<integerConstant>1</integerConstant>
</term>
</expression>
</letStatement>
<term>
<identifier>Main, class</identifier>
<expressionList>
<term>
</term>
</expression>
</expressionList>
</term>
</expression>
</letStatement>
<ifStatement>
<keyword>if</keyword>
<symbol>(</symbol>
<term>
<symbol>~</symbol>
<term>
<symbol>(</symbol>
<term>
</term>
<term>
<integerConstant>16</integerConstant>
</term>
</expression>
<symbol>)</symbol>
</term>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<ifStatement>
<keyword>if</keyword>
<symbol>(</symbol>
<term>
<symbol>~</symbol>
<term>
<symbol>(</symbol>
<term>
<symbol>(</symbol>
<term>
</term>
<term>
</term>
</expression>
<symbol>)</symbol>
</term>
<term>
<integerConstant>0</integerConstant>
</term>
</expression>
<symbol>)</symbol>
</term>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<identifier>Memory, class</identifier>
<expressionList>
<term>
<integerConstant>8000</integerConstant>
</term>
<term>
</term>
</expression>
<symbol>,</symbol>
<term>
<integerConstant>1</integerConstant>
</term>
</expression>
</expressionList>
</statements>
<symbol>}</symbol>
<keyword>else</keyword>
<symbol>{</symbol>
<statements>
<identifier>Memory, class</identifier>
<expressionList>
<term>
<integerConstant>8000</integerConstant>
</term>
<term>
</term>
</expression>
<symbol>,</symbol>
<term>
<integerConstant>0</integerConstant>
</term>
</expression>
</expressionList>
</statements>
<symbol>}</symbol>
</ifStatement>
</statements>
<symbol>}</symbol>
<keyword>else</keyword>
<symbol>{</symbol>
<statements>
<term>
</term>
</expression>
</letStatement>
</statements>
<symbol>}</symbol>
</ifStatement>
</statements>
<symbol>}</symbol>
</whileStatement>
<returnStatement>
<keyword>return</keyword>
<symbol>;</symbol>
</returnStatement>
</statements>
</subroutineBody>
</subroutineDec>
<keyword>int</keyword>
<symbol>(</symbol>
<parameterList>
<keyword>int</keyword>
<identifier>mask, argument, used, ARG, 0</identifier>
</parameterList>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<ifStatement>
<keyword>if</keyword>
<symbol>(</symbol>
<term>
</term>
<term>
<integerConstant>0</integerConstant>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<returnStatement>
<keyword>return</keyword>
<term>
<integerConstant>1</integerConstant>
</term>
</expression>
<symbol>;</symbol>
</returnStatement>
</statements>
<symbol>}</symbol>
<keyword>else</keyword>
<symbol>{</symbol>
<statements>
<returnStatement>
<keyword>return</keyword>
<term>
</term>
<term>
<integerConstant>2</integerConstant>
</term>
</expression>
<symbol>;</symbol>
</returnStatement>
</statements>
<symbol>}</symbol>
</ifStatement>
</statements>
</subroutineBody>
</subroutineDec>
<keyword>void</keyword>
<symbol>(</symbol>
<parameterList>
<keyword>int</keyword>
<identifier>startAddress, argument, used, ARG, 0</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>length, argument, used, ARG, 1</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>value, argument, used, ARG, 2</identifier>
</parameterList>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<whileStatement>
<keyword>while</keyword>
<symbol>(</symbol>
<term>
</term>
<term>
<integerConstant>0</integerConstant>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<identifier>Memory, class</identifier>
<expressionList>
<term>
</term>
</expression>
<symbol>,</symbol>
<term>
</term>
</expression>
</expressionList>
<term>
</term>
<term>
<integerConstant>1</integerConstant>
</term>
</expression>
</letStatement>
<term>
</term>
<term>
<integerConstant>1</integerConstant>
</term>
</expression>
</letStatement>
</statements>
<symbol>}</symbol>
</whileStatement>
<returnStatement>
<keyword>return</keyword>
<symbol>;</symbol>
</returnStatement>
</statements>
</subroutineBody>
</subroutineDec>
<symbol>}</symbol>
</class>
