// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    /* execute instruction */
    
    /* C命令の場合d1ビットが立っていればALUの計算結果を、A命令の場合はアドレスをAレジスタに格納する */
    Not(in=instruction[15], out=ni);
    Mux16(a=outM2, b=instruction, sel=ni, out=data);
    Or(a=ni, b=instruction[5], out=rwa);
    ARegister(in=data, load=rwa, out=a, out[0..14]=addressM);

    /* C命令の場合aビットが立っていればメモリ入力を、立っていなければAレジスタの値を操作する、A命令の場合はAレジスタの値を操作する */
    And(a=instruction[15], b=instruction[12], out= aorm);
    Mux16(a=a, b=inM, sel=aorm, out=am);

    /* C命令の場合d2ビットが立っていればALUの計算結果をDレジスタに格納する */
    And(a=instruction[15], b=instruction[4], out= rwd);
    DRegister(in=outM2, load=rwd, out=d);

    /* A/Dレジスタ,メモリ入力に対して計算を行なう */
    ALU(x=d, y=am, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=outM2, zr=zr, ng=ng);

    /* C命令の場合d3ビットが立っていればALUの計算結果をMに書き込む */
    And(a=instruction[15], b=instruction[3], out=writeM);
    
    /* fetch next instruction */
    And(a=instruction[15], b=instruction[2], out=j1);
    And(a=ng, b=j1, out=out1);
    
    And(a=instruction[15], b=instruction[1], out=j2);
    And(a=zr, b=j2, out=out2);
    
    Not(in=ng, out=pos);
    Not(in=zr, out=nzr);
    And(a=instruction[15], b=instruction[0], out=j3);
    And(a=pos, b=nzr, out=posnzr);
    And(a=posnzr, b=j3, out=out3);
    
    Or(a=out1, b=out2, out=out4);
    Or(a=out3, b=out4, out=load1);
    PC(in=a, load=load1, inc=true, reset=reset, out[0..14]=pc);
}
